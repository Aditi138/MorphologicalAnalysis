
import argparse
import lang2vec.lang2vec as l2v


parser =argparse.ArgumentParser()
parser.add_argument("--langs", type=str, default="fi hu", help="space separated langs: eng deu swe")
parser.add_argument("--output",type=str, default="/Users/aditichaudhary/Documents/CMU/SIGMORPH/typological_features/fi_hu_syntaxwals_18.txt" )
args = parser.parse_args()

#['S_SVO', 'S_SOV', 'S_VSO', 'S_VOS', 'S_OVS', 'S_OSV', 'S_SUBJECT_BEFORE_VERB', 'S_SUBJECT_AFTER_VERB',
# 'S_OBJECT_AFTER_VERB', 'S_OBJECT_BEFORE_VERB', 'S_SUBJECT_BEFORE_OBJECT', 'S_SUBJECT_AFTER_OBJECT',
# 'S_GENDER_MARK', 'S_SEX_MARK', 'S_DEFINITE_AFFIX', 'S_DEFINITE_WORD', 'S_INDEFINITE_AFFIX', 'S_INDEFINITE_WORD',
# 'S_POSSESSIVE_PREFIX', 'S_POSSESSIVE_SUFFIX', 'S_ADPOSITION_BEFORE_NOUN', 'S_ADPOSITION_AFTER_NOUN',
# 'S_POSSESSOR_BEFORE_NOUN', 'S_POSSESSOR_AFTER_NOUN', 'S_ADJECTIVE_BEFORE_NOUN', 'S_ADJECTIVE_AFTER_NOUN',
# 'S_DEMONSTRATIVE_WORD_BEFORE_NOUN', 'S_DEMONSTRATIVE_WORD_AFTER_NOUN', 'S_DEMONSTRATIVE_PREFIX',
# 'S_DEMONSTRATIVE_SUFFIX', 'S_NUMERAL_BEFORE_NOUN', 'S_NUMERAL_AFTER_NOUN', 'S_RELATIVE_BEFORE_NOUN',
# 'S_RELATIVE_AFTER_NOUN', 'S_RELATIVE_AROUND_NOUN', 'S_NOMINATIVE_VS_ACCUSATIVE_MARK',
# 'S_ERGATIVE_VS_ABSOLUTIVE_MARK', 'S_NEGATIVE_WORD_BEFORE_VERB', 'S_NEGATIVE_PREFIX',
# 'S_NEGATIVE_WORD_AFTER_VERB', 'S_NEGATIVE_SUFFIX', 'S_NEGATIVE_WORD_BEFORE_SUBJECT',
# 'S_NEGATIVE_WORD_AFTER_SUBJECT', 'S_NEGATIVE_WORD_BEFORE_OBJECT', 'S_NEGATIVE_WORD_AFTER_OBJECT',
# 'S_NEGATIVE_WORD_INITIAL', 'S_NEGATIVE_WORD_FINAL', 'S_NEGATIVE_WORD_ADJACENT_BEFORE_VERB',
# 'S_NEGATIVE_WORD_ADJACENT_AFTER_VERB', 'S_PLURAL_PREFIX', 'S_PLURAL_SUFFIX', 'S_PLURAL_WORD',
# 'S_OBJECT_HEADMARK', 'S_OBJECT_DEPMARK', 'S_POSSESSIVE_HEADMARK', 'S_POSSESSIVE_DEPMARK', 'S_TEND_HEADMARK',
# 'S_TEND_DEPMARK', 'S_TEND_PREFIX', 'S_TEND_SUFFIX', 'S_ANY_REDUP', 'S_CASE_PREFIX', 'S_CASE_SUFFIX',
# 'S_CASE_PROCLITIC', 'S_CASE_ENCLITIC', 'S_CASE_MARK', 'S_COMITATIVE_VS_INSTRUMENTAL_MARK', 'S_NUMCLASS_MARK',
# 'S_ADJECTIVE_WITHOUT_NOUN', 'S_PERFECTIVE_VS_IMPERFECTIVE_MARK', 'S_PAST_VS_PRESENT_MARK', 'S_FUTURE_AFFIX',
# 'S_TAM_PREFIX', 'S_TAM_SUFFIX', 'S_DEGREE_WORD_BEFORE_ADJECTIVE', 'S_DEGREE_WORD_AFTER_ADJECTIVE', 'S_POLARQ_MARK_INITIAL', 'S_POLARQ_MARK_FINAL', 'S_POLARQ_MARK_SECOND', 'S_POLARQ_WORD', 'S_POLARQ_AFFIX', 'S_SUBORDINATOR_WORD_BEFORE_CLAUSE', 'S_SUBORDINATOR_WORD_AFTER_CLAUSE', 'S_SUBORDINATOR_SUFFIX', 'S_PROSUBJECT_WORD', 'S_PROSUBJECT_AFFIX', 'S_PROSUBJECT_CLITIC', 'S_NEGATIVE_AFFIX', 'S_NEGATIVE_WORD', 'S_ANY_AGREEMENT_ON_ADJECTIVES', 'S_COMPLEMENTIZER_WORD_BEFORE_CLAUSE', 'S_COMPLEMENTIZER_WORD_AFTER_CLAUSE', 'S_VOX', 'S_XVO', 'S_XOV', 'S_OXV', 'S_OVX', 'S_OBLIQUE_AFTER_VERB', 'S_OBLIQUE_AFTER_OBJECT', 'S_OBLIQUE_BEFORE_VERB', 'S_OBLIQUE_BEFORE_OBJECT', 'S_ARTICLE_WORD_BEFORE_NOUN', 'S_ARTICLE_WORD_AFTER_NOUN']

fout = open(args.output, "w")
lang_list = args.langs.split()
features = l2v.get_features(lang_list, "syntax_wals")
for lang, feats in features.items():
    selected_feats = feats[:12]  +feats[20:26]
    features[lang] = [ "2.0" if isinstance(f, str) else str(f) for f in selected_feats]
    fout.write(lang + "\t" + " ".join(features[lang]) + "\n")

